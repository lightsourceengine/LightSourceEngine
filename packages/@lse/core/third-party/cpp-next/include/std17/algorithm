/*
 * Copyright (c) 2021 Light Source Software, LLC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

#pragma once

#include <algorithm>
#include <cassert>

namespace std17 {

// from: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0025r1.html
template<class T>
constexpr const T &clamp(const T &v, const T &lo, const T &hi) noexcept {
    assert(!(hi < lo));
    return (v < lo) ? lo : (hi < v) ? hi : v;
}

// from: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0025r1.html
template<class T, class Compare>
constexpr const T &clamp(const T &v, const T &lo, const T &hi, Compare comp) noexcept {
    assert(!comp(hi, lo));
    return comp(v, lo) ? lo : comp(hi, v) ? hi : v;
}

} // namespace std17
